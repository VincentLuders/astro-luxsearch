---
import Header from './Header.astro';
import Footer from './Footer.astro';
import GradientBackground from './GradientBackground.astro';

export interface Props {
    title: string;
    currentPage?: 'about' | 'opportunities' | 'hire-talent' | 'legal';
}

const { title, currentPage } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - luxsearch</title>
    <link rel="stylesheet" href="/styles/design-system.css">
    <meta name="view-transition" content="same-origin" />
</head>
<body>
    <GradientBackground />
    <Header currentPage={currentPage} />
    
    <!-- Main Content Area -->
    <main class="main-content">
        <slot />
    </main>

    <!-- Footer -->
    <Footer />

    <script>
        // Enhanced SPA navigation
        document.addEventListener('DOMContentLoaded', () => {
            const navLinks = document.querySelectorAll('.nav-link');
            
            navLinks.forEach(link => {
                link.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const href = link.getAttribute('href');
                    
                    // Immediate visual feedback
                    navLinks.forEach(l => l.classList.remove('current'));
                    link.classList.add('current');
                    
                    // Use View Transition API if available
                    if ('startViewTransition' in document) {
                        document.startViewTransition(async () => {
                            // Reduce flash by preloading content first
                            const response = await fetch(href);
                            const html = await response.text();
                            const parser = new DOMParser();
                            const newDoc = parser.parseFromString(html, 'text/html');
                            
                            // Quick content swap
                            const newContent = newDoc.querySelector('.main-content');
                            const currentContent = document.querySelector('.main-content');
                            if (newContent && currentContent) {
                                currentContent.innerHTML = newContent.innerHTML;
                                // Re-initialize JavaScript after content replacement
                                initializePageInteractivity();
                            }
                            
                            // Reset scroll and update
                            window.scrollTo({ top: 0, left: 0, behavior: 'instant' });
                            const newTitle = newDoc.querySelector('title');
                            if (newTitle) document.title = newTitle.textContent;
                            history.pushState({}, '', href);
                        });
                    } else {
                        // Smooth fallback
                        const mainContent = document.querySelector('.main-content');
                        mainContent.style.opacity = '0.5';
                        await loadPage(href);
                        mainContent.style.opacity = '1';
                    }
                });
            });

            async function loadPage(url) {
                try {
                    const response = await fetch(url);
                    const html = await response.text();
                    const parser = new DOMParser();
                    const newDoc = parser.parseFromString(html, 'text/html');
                    
                    // Update content
                    const newContent = newDoc.querySelector('.main-content');
                    const currentContent = document.querySelector('.main-content');
                    if (newContent && currentContent) {
                        currentContent.innerHTML = newContent.innerHTML;
                        // Re-initialize JavaScript after content replacement
                        initializePageInteractivity();
                    }
                    
                    // Reset scroll position to top immediately
                    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });
                    
                    // Update title
                    const newTitle = newDoc.querySelector('title');
                    if (newTitle) {
                        document.title = newTitle.textContent;
                    }
                    
                    // Update URL
                    history.pushState({}, '', url);
                    
                } catch (error) {
                    console.error('Navigation error:', error);
                    window.location.href = url;
                }
            }

            // Function to re-initialize page-specific JavaScript functionality
            function initializePageInteractivity() {
                // Re-initialize job card functionality if we're on the opportunities page
                if (document.querySelector('.job-card')) {
                    initializeJobCards();
                }
            }

            // Initialize on first page load
            initializePageInteractivity();
        });

        // Function to initialize job card interactions
        function initializeJobCards() {
            // Job modal functionality
            const jobModal = document.getElementById('jobModal');
            const modalContent = document.getElementById('modalJobContent');
            const closeBtn = document.querySelector('.job-modal-close');
            const backdrop = document.querySelector('.job-modal-backdrop');
            const jobDescriptionsScript = document.getElementById('jobDescriptions');
            
            if (!jobModal || !modalContent || !closeBtn || !backdrop || !jobDescriptionsScript) {
                return; // Exit if required elements don't exist
            }

            const jobDescriptions = JSON.parse(jobDescriptionsScript.textContent);

            // Remove existing event listeners to prevent duplication
            const existingCards = document.querySelectorAll('.job-card');
            existingCards.forEach(card => {
                // Clone node to remove all event listeners
                const newCard = card.cloneNode(true);
                card.parentNode.replaceChild(newCard, card);
            });

            // Add click listeners to job cards
            document.querySelectorAll('.job-card').forEach(card => {
                card.addEventListener('click', (e) => {
                    // Don't open modal if apply button was clicked
                    if (e.target.closest('.apply-btn')) {
                        return;
                    }
                    
                    const jobId = card.dataset.jobId;
                    if (jobDescriptions[jobId]) {
                        openJobModal(jobDescriptions[jobId]);
                    }
                });
            });

            // Close modal events - only add if not already added
            if (!closeBtn.hasAttribute('data-listener-added')) {
                closeBtn.addEventListener('click', closeJobModal);
                closeBtn.setAttribute('data-listener-added', 'true');
            }

            if (!backdrop.hasAttribute('data-listener-added')) {
                backdrop.addEventListener('click', closeJobModal);
                backdrop.setAttribute('data-listener-added', 'true');
            }

            // Ensure escape key listener is re-registered with the current modal instance
            if (window.__jobEscapeHandler) {
                document.removeEventListener('keydown', window.__jobEscapeHandler);
            }

            window.__jobEscapeHandler = (e) => {
                // Always look up the latest modal element
                const currentModal = document.getElementById('jobModal');
                if (e.key === 'Escape' && currentModal && currentModal.classList.contains('active')) {
                    closeJobModal();
                }
            };

            document.addEventListener('keydown', window.__jobEscapeHandler);
            
            function openJobModal(jobData) {
                // Update URL without page reload
                const jobId = Object.keys(jobDescriptions).find(id => 
                    jobDescriptions[id].title === jobData.title
                );
                if (jobId) {
                    const newUrl = `${window.location.pathname}?job=${jobId}`;
                    window.history.pushState({ jobId }, '', newUrl);
                }
                
                // Create modal content
                modalContent.innerHTML = createModalContent(jobData);
                
                // Add modal functionality
                addModalInteractivity();
                
                // Reset modal scroll position to top - prevents scroll position memory issue
                const modalContainer = document.querySelector('.job-modal-content');
                if (modalContainer) {
                    modalContainer.scrollTop = 0;
                }
                
                // Show modal with animation
                document.body.classList.add('modal-open');
                jobModal.classList.add('active');
            }

            function closeJobModal() {
                // Update URL to remove job parameter
                const urlWithoutJob = window.location.pathname;
                window.history.pushState({}, '', urlWithoutJob);
                
                jobModal.classList.remove('active');
                document.body.classList.remove('modal-open');
            }

            function createModalContent(job) {
                return `
                    <div class="job-modal-header">
                        <h2 class="title">${job.title}</h2>
                        <div class="tags">
                            ${job.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                        <div class="job-details">
                            <span class="salary">${job.salary}</span>
                            <span class="location">${job.location}</span>
                        </div>
                    </div>

                    <div class="job-modal-body">
                        <div class="job-section">
                            <h3 class="subtitle">About this role</h3>
                            <p class="body-text">${job.description.overview}</p>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">Key Responsibilities</h3>
                            <ul class="list-bulleted">
                                ${job.description.responsibilities.map(item => `<li>${item}</li>`).join('')}
                            </ul>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">Requirements</h3>
                            <ul class="list-bulleted">
                                ${job.description.requirements.map(item => `<li>${item}</li>`).join('')}
                            </ul>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">What we offer</h3>
                            <ul class="list-bulleted">
                                ${job.description.benefits.map(item => `<li>${item}</li>`).join('')}
                            </ul>
                        </div>
                    </div>

                    <div class="job-modal-footer">
                        <div class="application-form">
                            <div class="file-upload-container">
                                <div class="file-upload-area" id="fileUploadArea">
                                    <div class="file-upload-content">
                                        <svg class="file-upload-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                            <polyline points="7,10 12,15 17,10"></polyline>
                                            <line x1="12" y1="15" x2="12" y2="3"></line>
                                        </svg>
                                        <h4>Drop your CV here or click to browse</h4>
                                        <p class="small-text">PDF, DOC, DOCX (max 10MB)</p>
                                    </div>
                                    <input type="file" id="cvFile" accept=".pdf,.doc,.docx" hidden>
                                </div>
                                <div class="file-selected" id="fileSelected" style="display: none;">
                                    <span class="file-name" id="fileName"></span>
                                    <button type="button" class="file-remove" id="fileRemove">×</button>
                                </div>
                            </div>

                            <div class="form-checkboxes">
                                <label class="checkbox-container">
                                    <input type="checkbox" id="newsletterConsent">
                                    <span class="checkmark"></span>
                                    <span class="small-text">Send me job alerts and updates from luxsearch (unsubscribe anytime).</span>
                                </label>
                            </div>

                            <button class="btn btn-submit" id="submitApplication" disabled>
                                <span>Submit Application</span>
                            </button>

                            <p class="privacy-notice small-text">
                                By submitting, you accept our <a href="#" class="privacy-link">Privacy Policy</a> and <a href="#" class="privacy-link">Terms of Use</a> and allow us to share your data with our partner companies.
                            </p>
                        </div>
                    </div>
                `;
            }

            function addModalInteractivity() {
                const fileUploadArea = document.getElementById('fileUploadArea');
                const fileInput = document.getElementById('cvFile');
                const fileSelected = document.getElementById('fileSelected');
                const fileName = document.getElementById('fileName');
                const fileRemove = document.getElementById('fileRemove');
                const submitBtn = document.getElementById('submitApplication');

                // File upload interactions
                fileUploadArea.addEventListener('click', () => fileInput.click());
                fileUploadArea.addEventListener('dragover', handleDragOver);
                fileUploadArea.addEventListener('drop', handleDrop);
                fileInput.addEventListener('change', handleFileSelect);
                fileRemove.addEventListener('click', removeFile);

                function handleDragOver(e) {
                    e.preventDefault();
                    fileUploadArea.classList.add('drag-over');
                }

                function handleDrop(e) {
                    e.preventDefault();
                    fileUploadArea.classList.remove('drag-over');
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        handleFileSelect({ target: { files } });
                    }
                }

                function handleFileSelect(e) {
                    const file = e.target.files[0];
                    if (file) {
                        fileName.textContent = file.name;
                        fileUploadArea.style.display = 'none';
                        fileSelected.style.display = 'flex';
                        updateSubmitButton();
                    }
                }

                function removeFile() {
                    fileInput.value = '';
                    fileUploadArea.style.display = '';
                    fileSelected.style.display = 'none';
                    updateSubmitButton();
                }

                function updateSubmitButton() {
                    const hasFile = fileInput.files.length > 0;
                    submitBtn.disabled = !hasFile;
                    submitBtn.classList.toggle('btn-submit-active', hasFile);
                }

                // Submit form
                submitBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (fileInput.files.length > 0) {
                        alert('Application submitted successfully! We will be in touch soon.');
                        closeJobModal();
                    }
                });
            }

            // Set up global URL management - make functions globally accessible
            window.__openJobFromUrl = function(jobId) {
                if (jobDescriptions[jobId]) {
                    openJobModal(jobDescriptions[jobId]);
                    return true;
                }
                return false;
            };

            window.__closeJobModal = closeJobModal;
        }

        // Handle browser navigation - set up once globally
        if (!window.__jobNavInitialized) {
            window.__jobNavInitialized = true;
            
            window.addEventListener('popstate', (event) => {
                // Check if we should open a job modal based on URL
                const urlParams = new URLSearchParams(window.location.search);
                const jobId = urlParams.get('job');
                
                if (jobId && window.__openJobFromUrl && window.__openJobFromUrl(jobId)) {
                    // Job opened successfully
                } else {
                    // Close modal if no job in URL or job not found
                    const modal = document.getElementById('jobModal');
                    if (modal && modal.classList.contains('active')) {
                        modal.classList.remove('active');
                        document.body.classList.remove('modal-open');
                    }
                }
            });

            // Check URL on page load to auto-open job if present
            const urlParams = new URLSearchParams(window.location.search);
            const jobId = urlParams.get('job');
            
            if (jobId && window.location.pathname.includes('/opportunities')) {
                // Wait for modal setup to complete
                setTimeout(() => {
                    if (window.__openJobFromUrl) {
                        window.__openJobFromUrl(jobId);
                    }
                }, 100);
            }
        }
    </script>
</body>
</html> 