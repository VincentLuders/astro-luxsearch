---
import Header from './Header.astro';
import GradientBackground from './GradientBackground.astro';

export interface Props {
    title: string;
    currentPage?: 'about' | 'opportunities' | 'hire-talent';
}

const { title, currentPage } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - luxsearch</title>
    <link rel="stylesheet" href="/styles/design-system.css">
    <meta name="view-transition" content="same-origin" />
    
    <!-- View Transitions Enhancement Script -->
    <script>
        // Enable View Transitions API for better animation support
        if ('startViewTransition' in document) {
            // Add smooth transition for navigation
            document.addEventListener('astro:before-preparation', () => {
                document.documentElement.classList.add('page-transitioning');
            });
            
            document.addEventListener('astro:after-swap', () => {
                document.documentElement.classList.remove('page-transitioning');
            });
            
            // Add enhanced animations for card transitions
            document.addEventListener('astro:page-load', () => {
                // Ensure cards have proper transform origin for flipping
                const cards = document.querySelectorAll('.card');
                cards.forEach((card, index) => {
                    card.style.transformOrigin = 'center center';
                    card.style.backfaceVisibility = 'hidden';
                    
                    // Add subtle entrance animation for cards
                    card.style.animationDelay = `${index * 0.1}s`;
                });
                
                // Add intersection observer for enhanced card effects
                if ('IntersectionObserver' in window) {
                    const cardObserver = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                entry.target.classList.add('in-view');
                            }
                        });
                    }, { threshold: 0.1 });
                    
                    cards.forEach(card => cardObserver.observe(card));
                }
            });
        } else {
            // Fallback for browsers without View Transitions
            console.log('View Transitions API not supported, using fallback animations');
        }
        
        // Preload critical assets for smooth transitions
        document.addEventListener('DOMContentLoaded', () => {
            const links = document.querySelectorAll('a[href^="/"]');
            links.forEach(link => {
                link.addEventListener('mouseenter', () => {
                    const href = link.getAttribute('href');
                    if (href && !link.dataset.preloaded) {
                        const preloadLink = document.createElement('link');
                        preloadLink.rel = 'preload';
                        preloadLink.href = href;
                        preloadLink.as = 'document';
                        document.head.appendChild(preloadLink);
                        link.dataset.preloaded = 'true';
                    }
                });
            });
        });
    </script>
    
    <style>
        /* Extra animation enhancements */
        .page-transitioning {
            overflow: hidden;
        }
        
        .card.in-view {
            animation: card-entrance 0.6s ease-out forwards;
        }
        
        @keyframes card-entrance {
            from {
                opacity: 0;
                transform: translateY(20px) rotateX(-10deg);
            }
            to {
                opacity: 1;
                transform: translateY(0) rotateX(0deg);
            }
        }
        
        /* Enhanced hover effects during transitions */
        .card:hover {
            transform: translateY(-5px) rotateX(2deg) rotateY(2deg);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
    </style>
</head>
<body>
    <GradientBackground />
    <Header currentPage={currentPage} />
    
    <!-- Main Content Area -->
    <main class="main-content">
        <slot />
    </main>

    <script>
        // Enhanced SPA navigation
        document.addEventListener('DOMContentLoaded', () => {
            const navLinks = document.querySelectorAll('.nav-link');
            
            navLinks.forEach(link => {
                link.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const href = link.getAttribute('href');
                    
                    // Immediate visual feedback
                    navLinks.forEach(l => l.classList.remove('current'));
                    link.classList.add('current');
                    
                    // Use View Transition API if available
                    if ('startViewTransition' in document) {
                        document.startViewTransition(async () => {
                            // Reduce flash by preloading content first
                            const response = await fetch(href);
                            const html = await response.text();
                            const parser = new DOMParser();
                            const newDoc = parser.parseFromString(html, 'text/html');
                            
                            // Quick content swap
                            const newContent = newDoc.querySelector('.main-content');
                            const currentContent = document.querySelector('.main-content');
                            if (newContent && currentContent) {
                                currentContent.innerHTML = newContent.innerHTML;
                            }
                            
                            // Reset scroll and update
                            window.scrollTo({ top: 0, left: 0, behavior: 'instant' });
                            const newTitle = newDoc.querySelector('title');
                            if (newTitle) document.title = newTitle.textContent;
                            history.pushState({}, '', href);
                        });
                    } else {
                        // Smooth fallback
                        const mainContent = document.querySelector('.main-content');
                        mainContent.style.opacity = '0.5';
                        await loadPage(href);
                        mainContent.style.opacity = '1';
                    }
                });
            });

            async function loadPage(url) {
                try {
                    const response = await fetch(url);
                    const html = await response.text();
                    const parser = new DOMParser();
                    const newDoc = parser.parseFromString(html, 'text/html');
                    
                    // Update content
                    const newContent = newDoc.querySelector('.main-content');
                    const currentContent = document.querySelector('.main-content');
                    if (newContent && currentContent) {
                        currentContent.innerHTML = newContent.innerHTML;
                    }
                    
                    // Reset scroll position to top immediately
                    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });
                    
                    // Update title
                    const newTitle = newDoc.querySelector('title');
                    if (newTitle) {
                        document.title = newTitle.textContent;
                    }
                    
                    // Update URL
                    history.pushState({}, '', url);
                    
                } catch (error) {
                    console.error('Navigation error:', error);
                    window.location.href = url;
                }
            }
        });

        // Handle browser navigation
        window.addEventListener('popstate', () => {
            location.reload();
        });
    </script>
</body>
</html> 