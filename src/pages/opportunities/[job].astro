---
import Layout from '../../components/Layout.astro';
import { getJobById, getAllJobIds } from '../../data/jobs.js';

export async function getStaticPaths() {
    const jobIds = getAllJobIds();
    return jobIds.map(id => ({
        params: { job: id }
    }));
}

const { job } = Astro.params;
const jobData = getJobById(job);

// If job doesn't exist, return 404
if (!jobData) {
    return Astro.redirect('/404');
}
---

<Layout title={`${jobData.title} - Opportunities`} currentPage="opportunities">
    <div class="container">
        <!-- Back to opportunities link -->
        <div class="back-navigation">
            <a href="/opportunities" class="back-link">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="m15 18-6-6 6-6"/>
                </svg>
                Back to All Opportunities
            </a>
        </div>

        <!-- Job Detail Content -->
        <div class="job-detail-container">
            <div class="card card-tall">
                <div class="job-detail-header">
                    <h1 class="title">{jobData.title}</h1>
                    <div class="tags">
                        {jobData.tags.map(tag => (
                            <span class="tag">{tag}</span>
                        ))}
                    </div>
                    <div class="job-details">
                        <span class="salary">{jobData.salary}</span>
                        <span class="location">{jobData.location}</span>
                    </div>
                </div>

                <div class="job-detail-body">
                    <div class="job-section">
                        <h3 class="subtitle">About this role</h3>
                        <p class="body-text">{jobData.description.overview}</p>
                    </div>

                    <div class="job-section">
                        <h3 class="subtitle">Key Responsibilities</h3>
                        <ul class="list-bulleted">
                            {jobData.description.responsibilities.map(item => (
                                <li>{item}</li>
                            ))}
                        </ul>
                    </div>

                    <div class="job-section">
                        <h3 class="subtitle">Requirements</h3>
                        <ul class="list-bulleted">
                            {jobData.description.requirements.map(item => (
                                <li>{item}</li>
                            ))}
                        </ul>
                    </div>

                    <div class="job-section">
                        <h3 class="subtitle">What we offer</h3>
                        <ul class="list-bulleted">
                            {jobData.description.benefits.map(item => (
                                <li>{item}</li>
                            ))}
                        </ul>
                    </div>
                </div>

                <div class="job-detail-footer">
                    <div class="application-form">
                        <div class="file-upload-container">
                            <div class="file-upload-area" id="fileUploadArea">
                                <div class="file-upload-content">
                                    <svg class="file-upload-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                        <polyline points="7,10 12,15 17,10"></polyline>
                                        <line x1="12" y1="15" x2="12" y2="3"></line>
                                    </svg>
                                    <h4>Drop your CV here or click to browse</h4>
                                    <p class="small-text">PDF, DOC, DOCX (max 10MB)</p>
                                </div>
                                <input type="file" id="cvFile" accept=".pdf,.doc,.docx" hidden>
                            </div>
                            <div class="file-selected" id="fileSelected" style="display: none;">
                                <span class="file-name" id="fileName"></span>
                                <button type="button" class="file-remove" id="fileRemove">Ã—</button>
                            </div>
                        </div>

                        <div class="form-checkboxes">
                            <label class="checkbox-container">
                                <input type="checkbox" id="newsletterConsent">
                                <span class="checkmark"></span>
                                <span class="small-text">Send me job alerts and updates from luxsearch (unsubscribe anytime).</span>
                            </label>
                        </div>

                        <button class="btn btn-submit" id="submitApplication" disabled>
                            <span>Submit Application</span>
                        </button>

                        <p class="privacy-notice small-text">
                            By submitting, you accept our <a href="#" class="privacy-link">Privacy Policy</a> and <a href="#" class="privacy-link">Terms of Use</a> and allow us to share your data with our partner companies.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // File upload functionality for job detail page
        document.addEventListener('DOMContentLoaded', () => {
            const fileUploadArea = document.getElementById('fileUploadArea');
            const fileInput = document.getElementById('cvFile');
            const fileSelected = document.getElementById('fileSelected');
            const fileName = document.getElementById('fileName');
            const fileRemove = document.getElementById('fileRemove');
            const submitBtn = document.getElementById('submitApplication');

            if (!fileUploadArea || !fileInput || !fileSelected || !fileName || !fileRemove || !submitBtn) {
                return; // Exit if elements don't exist
            }

            // File upload interactions
            fileUploadArea.addEventListener('click', () => fileInput.click());
            fileUploadArea.addEventListener('dragover', handleDragOver);
            fileUploadArea.addEventListener('drop', handleDrop);
            fileInput.addEventListener('change', handleFileSelect);
            fileRemove.addEventListener('click', removeFile);

            function handleDragOver(e) {
                e.preventDefault();
                fileUploadArea.classList.add('drag-over');
            }

            function handleDrop(e) {
                e.preventDefault();
                fileUploadArea.classList.remove('drag-over');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFileSelect({ target: { files } });
                }
            }

            function handleFileSelect(e) {
                const file = e.target.files[0];
                if (file) {
                    fileName.textContent = file.name;
                    fileUploadArea.style.display = 'none';
                    fileSelected.style.display = 'flex';
                    updateSubmitButton();
                }
            }

            function removeFile() {
                fileInput.value = '';
                fileUploadArea.style.display = '';
                fileSelected.style.display = 'none';
                updateSubmitButton();
            }

            function updateSubmitButton() {
                const hasFile = fileInput.files.length > 0;
                submitBtn.disabled = !hasFile;
                submitBtn.classList.toggle('btn-submit-active', hasFile);
            }

            // Submit form
            submitBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (fileInput.files.length > 0) {
                    alert('Application submitted successfully! We will be in touch soon.');
                    // Reset form
                    removeFile();
                }
            });
        });
    </script>
</Layout>

<style>
    .back-navigation {
        margin-bottom: 2rem;
    }

    .back-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--color-text-primary);
        text-decoration: none;
        font-size: var(--font-size-body);
        transition: all 0.3s ease;
        padding: 0.5rem 1rem;
        border-radius: var(--radius-button);
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    }

    .back-link:hover {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.3);
        transform: translateX(-2px);
    }

    .back-link svg {
        transition: transform 0.3s ease;
    }

    .back-link:hover svg {
        transform: translateX(-2px);
    }

    .job-detail-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .job-detail-header {
        margin-bottom: 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 2rem;
    }

    .job-detail-header .title {
        margin-bottom: 1rem;
        color: var(--color-text-black);
        font-size: 2.5rem;
    }

    .job-detail-header .tags {
        margin-bottom: 1rem;
    }

    .job-detail-header .job-details {
        margin-bottom: 0;
    }

    .job-detail-body {
        margin-bottom: 2rem;
    }

    .job-section {
        margin-bottom: 2rem;
    }

    .job-section:last-child {
        margin-bottom: 0;
    }

    .job-section .subtitle {
        margin-bottom: 1rem;
        color: var(--color-text-black);
    }

    .job-section .body-text {
        color: var(--color-text-primary);
        line-height: 1.6;
    }

    .job-section .list-bulleted {
        margin-top: 0.5rem;
    }

    .job-detail-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 2rem;
    }

    @media (max-width: 768px) {
        .job-detail-header .title {
            font-size: 2rem;
        }
        
        .back-navigation {
            margin-bottom: 1rem;
        }
    }
</style> 