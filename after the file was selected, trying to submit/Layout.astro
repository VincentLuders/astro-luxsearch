document.addEventListener("DOMContentLoaded", () => {
  const navLinks = document.querySelectorAll(".nav-link");
  navLinks.forEach((link) => {
    link.addEventListener("click", async (e) => {
      e.preventDefault();
      const href = link.getAttribute("href");
      navLinks.forEach((l) => l.classList.remove("current"));
      if (link.classList.contains("logo-link")) {
        const matchingNavLink = document.querySelector(`.nav .nav-link[href="${href}"]`);
        if (matchingNavLink) {
          matchingNavLink.classList.add("current");
        }
      } else {
        link.classList.add("current");
      }
      if ("startViewTransition" in document) {
        document.startViewTransition(async () => {
          const response = await fetch(href);
          const html = await response.text();
          const parser = new DOMParser();
          const newDoc = parser.parseFromString(html, "text/html");
          const newContent = newDoc.querySelector(".main-content");
          const currentContent = document.querySelector(".main-content");
          if (newContent && currentContent) {
            currentContent.innerHTML = newContent.innerHTML;
            initializePageInteractivity();
          }
          window.scrollTo({ top: 0, left: 0, behavior: "instant" });
          const newTitle = newDoc.querySelector("title");
          if (newTitle) document.title = newTitle.textContent;
          history.pushState({}, "", href);
        });
      } else {
        const mainContent = document.querySelector(".main-content");
        mainContent.style.opacity = "0.5";
        await loadPage(href);
        mainContent.style.opacity = "1";
      }
    });
  });
  async function loadPage(url) {
    try {
      const response = await fetch(url);
      const html = await response.text();
      const parser = new DOMParser();
      const newDoc = parser.parseFromString(html, "text/html");
      const newContent = newDoc.querySelector(".main-content");
      const currentContent = document.querySelector(".main-content");
      if (newContent && currentContent) {
        currentContent.innerHTML = newContent.innerHTML;
        initializePageInteractivity();
      }
      window.scrollTo({ top: 0, left: 0, behavior: "instant" });
      const newTitle = newDoc.querySelector("title");
      if (newTitle) {
        document.title = newTitle.textContent;
      }
      history.pushState({}, "", url);
    } catch (error) {
      console.error("Navigation error:", error);
      window.location.href = url;
    }
  }
  function initializePageInteractivity() {
    if (document.querySelector(".job-card")) {
      initializeJobCards();
    }
  }
  initializePageInteractivity();
});
function initializeJobCards() {
  const jobModal = document.getElementById("jobModal");
  const modalContent = document.getElementById("modalJobContent");
  const closeBtn = document.querySelector(".job-modal-close");
  const backdrop = document.querySelector(".job-modal-backdrop");
  const jobDescriptionsScript = document.getElementById("jobDescriptions");
  if (!jobModal || !modalContent || !closeBtn || !backdrop || !jobDescriptionsScript) {
    return;
  }
  const jobDescriptions = JSON.parse(jobDescriptionsScript.textContent);
  const existingCards = document.querySelectorAll(".job-card");
  existingCards.forEach((card) => {
    const newCard = card.cloneNode(true);
    card.parentNode.replaceChild(newCard, card);
  });
  document.querySelectorAll(".job-card").forEach((card) => {
    card.addEventListener("click", (e) => {
      if (e.target.closest(".apply-btn")) {
        return;
      }
      const jobId = card.dataset.jobId;
      if (jobDescriptions[jobId]) {
        openJobModal(jobDescriptions[jobId]);
      }
    });
  });
  if (!closeBtn.hasAttribute("data-listener-added")) {
    closeBtn.addEventListener("click", closeJobModal);
    closeBtn.setAttribute("data-listener-added", "true");
  }
  if (!backdrop.hasAttribute("data-listener-added")) {
    backdrop.addEventListener("click", closeJobModal);
    backdrop.setAttribute("data-listener-added", "true");
  }
  if (window.__jobEscapeHandler) {
    document.removeEventListener("keydown", window.__jobEscapeHandler);
  }
  window.__jobEscapeHandler = (e) => {
    const currentModal = document.getElementById("jobModal");
    if (e.key === "Escape" && currentModal && currentModal.classList.contains("active")) {
      closeJobModal();
    }
  };
  document.addEventListener("keydown", window.__jobEscapeHandler);
  function openJobModal(jobData) {
    const jobId = Object.keys(jobDescriptions).find(
      (id) => jobDescriptions[id].title === jobData.title
    );
    if (jobId) {
      const newUrl = `${window.location.pathname}?job=${jobId}`;
      window.history.pushState({ jobId }, "", newUrl);
    }
    modalContent.innerHTML = createModalContent(jobData);
    addModalInteractivity();
    const modalContainer = document.querySelector(".job-modal-content");
    if (modalContainer) {
      modalContainer.scrollTop = 0;
    }
    document.body.classList.add("modal-open");
    jobModal.classList.add("active");
  }
  function closeJobModal() {
    const urlWithoutJob = window.location.pathname;
    window.history.pushState({}, "", urlWithoutJob);
    jobModal.classList.remove("active");
    document.body.classList.remove("modal-open");
  }
  function createModalContent(job) {
    return `
                    <div class="job-modal-header">
                        <h2 class="title">${job.title}</h2>
                        <div class="tags">
                            ${job.tags.map((tag) => `<span class="tag">${tag}</span>`).join("")}
                        </div>
                        <div class="job-details">
                            <span class="salary">${job.salary}</span>
                            <span class="location">${job.location}</span>
                        </div>
                    </div>

                    <div class="job-modal-body">
                        <div class="job-section">
                            <h3 class="subtitle">About this role</h3>
                            <p class="body-text">${job.description.overview}</p>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">Key Responsibilities</h3>
                            <ul class="list-bulleted">
                                ${job.description.responsibilities.map((item) => `<li>${item}</li>`).join("")}
                            </ul>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">Requirements</h3>
                            <ul class="list-bulleted">
                                ${job.description.requirements.map((item) => `<li>${item}</li>`).join("")}
                            </ul>
                        </div>

                        <div class="job-section">
                            <h3 class="subtitle">What we offer</h3>
                            <ul class="list-bulleted">
                                ${job.description.benefits.map((item) => `<li>${item}</li>`).join("")}
                            </ul>
                        </div>
                    </div>

                    <div class="job-modal-footer">
                        <div class="application-form">
                            <div class="file-upload-container">
                                <div class="file-upload-area" id="fileUploadArea">
                                    <div class="file-upload-content">
                                        <svg class="file-upload-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                            <polyline points="7,10 12,15 17,10"></polyline>
                                            <line x1="12" y1="15" x2="12" y2="3"></line>
                                        </svg>
                                        <h4>Drop your CV here or click to browse</h4>
                                        <p class="small-text">PDF, DOC, DOCX (max 10MB)</p>
                                    </div>
                                    <input type="file" id="cvFile" accept=".pdf,.doc,.docx" hidden>
                                </div>
                                <div class="file-selected" id="fileSelected" style="display: none;">
                                    <span class="file-name" id="fileName"></span>
                                    <button type="button" class="file-remove" id="fileRemove">×</button>
                                </div>
                            </div>

                            <div class="form-checkboxes">
                                <label class="checkbox-container">
                                    <input type="checkbox" id="newsletterConsent">
                                    <span class="checkmark"></span>
                                    <span class="small-text">Send me job alerts and updates from luxsearch® (unsubscribe anytime).</span>
                                </label>
                            </div>

                            <button class="btn btn-submit" id="submitApplication" disabled>
                                <span>Submit Application</span>
                            </button>

                            <p class="privacy-notice small-text">
                                By submitting, you accept our <a href="#" class="privacy-link">Privacy Policy</a> and <a href="#" class="privacy-link">Terms of Use</a> and allow us to share your data with our partner companies.
                            </p>
                        </div>
                    </div>
                `;
  }
  function addModalInteractivity() {
    const fileUploadArea = document.getElementById("fileUploadArea");
    const fileInput = document.getElementById("cvFile");
    const fileSelected = document.getElementById("fileSelected");
    const fileName = document.getElementById("fileName");
    const fileRemove = document.getElementById("fileRemove");
    fileUploadArea.addEventListener("click", () => fileInput.click());
    fileUploadArea.addEventListener("dragover", handleDragOver);
    fileUploadArea.addEventListener("drop", handleDrop);
    fileInput.addEventListener("change", handleFileSelect);
    fileRemove.addEventListener("click", removeFile);
    function handleDragOver(e) {
      e.preventDefault();
      fileUploadArea.classList.add("drag-over");
    }
    function handleDrop(e) {
      e.preventDefault();
      fileUploadArea.classList.remove("drag-over");
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        handleFileSelect({ target: { files } });
      }
    }
    function handleFileSelect(e) {
      const file = e.target.files[0];
      if (file) {
        fileName.textContent = file.name;
        fileUploadArea.style.display = "none";
        fileSelected.style.display = "flex";
      }
    }
    function removeFile() {
      fileInput.value = "";
      fileUploadArea.style.display = "";
      fileSelected.style.display = "none";
    }
  }
  window.__openJobFromUrl = function(jobId) {
    if (jobDescriptions[jobId]) {
      openJobModal(jobDescriptions[jobId]);
      return true;
    }
    return false;
  };
  window.__closeJobModal = closeJobModal;
}
if (!window.__jobNavInitialized) {
  window.__jobNavInitialized = true;
  window.addEventListener("popstate", (event) => {
    const urlParams2 = new URLSearchParams(window.location.search);
    const jobId2 = urlParams2.get("job");
    if (jobId2 && window.__openJobFromUrl && window.__openJobFromUrl(jobId2)) {
    } else {
      const modal = document.getElementById("jobModal");
      if (modal && modal.classList.contains("active")) {
        modal.classList.remove("active");
        document.body.classList.remove("modal-open");
      }
    }
  });
  const urlParams = new URLSearchParams(window.location.search);
  const jobId = urlParams.get("job");
  if (jobId && window.location.pathname.includes("/opportunities")) {
    setTimeout(() => {
      if (window.__openJobFromUrl) {
        window.__openJobFromUrl(jobId);
      }
    }, 100);
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dC5hc3RybyJdLCJzb3VyY2VzQ29udGVudCI6WyItLS1cbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXIuYXN0cm8nO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL0Zvb3Rlci5hc3Rybyc7XG5pbXBvcnQgR3JhZGllbnRCYWNrZ3JvdW5kIGZyb20gJy4vR3JhZGllbnRCYWNrZ3JvdW5kLmFzdHJvJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBjdXJyZW50UGFnZT86ICdhYm91dCcgfCAnb3Bwb3J0dW5pdGllcycgfCAnaGlyZS10YWxlbnQnIHwgJ2xlZ2FsJztcbn1cblxuY29uc3QgeyB0aXRsZSwgY3VycmVudFBhZ2UgfSA9IEFzdHJvLnByb3BzO1xuLS0tXG5cbjwhRE9DVFlQRSBodG1sPlxuPGh0bWwgbGFuZz1cImVuXCI+XG48aGVhZD5cbiAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIj5cbiAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiPlxuICAgIDx0aXRsZT57dGl0bGV9IHwgbHV4c2VhcmNowq48L3RpdGxlPlxuICAgIFxuICAgIDwhLS0gRmF2aWNvbiAtLT5cbiAgICA8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3gtaWNvblwiIGhyZWY9XCIvZmF2aWNvbi5pY29cIj5cbiAgICA8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMTZ4MTZcIiBocmVmPVwiL2Zhdmljb24tMTZ4MTYucG5nXCI+XG4gICAgPGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjMyeDMyXCIgaHJlZj1cIi9mYXZpY29uLTMyeDMyLnBuZ1wiPlxuICAgIDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjE4MHgxODBcIiBocmVmPVwiL2FwcGxlLXRvdWNoLWljb24ucG5nXCI+XG4gICAgPGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjE5MngxOTJcIiBocmVmPVwiL2FuZHJvaWQtY2hyb21lLTE5MngxOTIucG5nXCI+XG4gICAgXG4gICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIvc3R5bGVzL2Rlc2lnbi1zeXN0ZW0uY3NzXCI+XG4gICAgPG1ldGEgbmFtZT1cInZpZXctdHJhbnNpdGlvblwiIGNvbnRlbnQ9XCJzYW1lLW9yaWdpblwiIC8+XG4gICAgPHN0eWxlPlxuICAgICAgICAvKiBTdGlja3kgRm9vdGVyIExheW91dCAtIG1haW50YWlucyBkZXNpZ24gc3lzdGVtIGNvbnNpc3RlbmN5ICovXG4gICAgICAgIGJvZHkge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLm1haW4tY29udGVudCB7XG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qIEVuc3VyZSBmb290ZXIgbWFyZ2luIGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggZmxleCBsYXlvdXQgKi9cbiAgICAgICAgLmZvb3RlciB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICB9XG4gICAgPC9zdHlsZT5cbjwvaGVhZD5cbjxib2R5PlxuICAgIDxHcmFkaWVudEJhY2tncm91bmQgLz5cbiAgICA8SGVhZGVyIGN1cnJlbnRQYWdlPXtjdXJyZW50UGFnZX0gLz5cbiAgICBcbiAgICA8IS0tIE1haW4gQ29udGVudCBBcmVhIC0tPlxuICAgIDxtYWluIGNsYXNzPVwibWFpbi1jb250ZW50XCI+XG4gICAgICAgIDxzbG90IC8+XG4gICAgPC9tYWluPlxuXG4gICAgPCEtLSBGb290ZXIgLS0+XG4gICAgPEZvb3RlciAvPlxuXG4gICAgPHNjcmlwdD5cbiAgICAgICAgLy8gRW5oYW5jZWQgU1BBIG5hdmlnYXRpb25cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hdkxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5hdi1saW5rJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG5hdkxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBJbW1lZGlhdGUgdmlzdWFsIGZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICAgIG5hdkxpbmtzLmZvckVhY2gobCA9PiBsLmNsYXNzTGlzdC5yZW1vdmUoJ2N1cnJlbnQnKSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciBsb2dvIGNsaWNrIC0gaGlnaGxpZ2h0IHRoZSBjb3JyZXNwb25kaW5nIG5hdiBsaW5rIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmsuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2dvLWxpbmsnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgbWF0Y2hpbmcgbmF2IGxpbmsgYnkgaHJlZiBhbmQgYWRkIGN1cnJlbnQgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nTmF2TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5uYXYgLm5hdi1saW5rW2hyZWY9XCIke2hyZWZ9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdOYXZMaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdOYXZMaW5rLmNsYXNzTGlzdC5hZGQoJ2N1cnJlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZCgnY3VycmVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgVmlldyBUcmFuc2l0aW9uIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdzdGFydFZpZXdUcmFuc2l0aW9uJyBpbiBkb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVkdWNlIGZsYXNoIGJ5IHByZWxvYWRpbmcgY29udGVudCBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUXVpY2sgY29udGVudCBzd2FwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9IG5ld0RvYy5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NvbnRlbnQgJiYgY3VycmVudENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRlbnQuaW5uZXJIVE1MID0gbmV3Q29udGVudC5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlLWluaXRpYWxpemUgSmF2YVNjcmlwdCBhZnRlciBjb250ZW50IHJlcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVQYWdlSW50ZXJhY3Rpdml0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBzY3JvbGwgYW5kIHVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogMCwgbGVmdDogMCwgYmVoYXZpb3I6ICdpbnN0YW50JyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUaXRsZSA9IG5ld0RvYy5xdWVyeVNlbGVjdG9yKCd0aXRsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdUaXRsZSkgZG9jdW1lbnQudGl0bGUgPSBuZXdUaXRsZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTbW9vdGggZmFsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1haW5Db250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tY29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbnRlbnQuc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbG9hZFBhZ2UoaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29udGVudC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gbG9hZFBhZ2UodXJsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbCwgJ3RleHQvaHRtbCcpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9IG5ld0RvYy5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tY29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q29udGVudCAmJiBjdXJyZW50Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRlbnQuaW5uZXJIVE1MID0gbmV3Q29udGVudC5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1pbml0aWFsaXplIEphdmFTY3JpcHQgYWZ0ZXIgY29udGVudCByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZVBhZ2VJbnRlcmFjdGl2aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHNjcm9sbCBwb3NpdGlvbiB0byB0b3AgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwLCBsZWZ0OiAwLCBiZWhhdmlvcjogJ2luc3RhbnQnIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRpdGxlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RpdGxlID0gbmV3RG9jLnF1ZXJ5U2VsZWN0b3IoJ3RpdGxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdUaXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBuZXdUaXRsZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIFVSTFxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05hdmlnYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZ1bmN0aW9uIHRvIHJlLWluaXRpYWxpemUgcGFnZS1zcGVjaWZpYyBKYXZhU2NyaXB0IGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemVQYWdlSW50ZXJhY3Rpdml0eSgpIHtcbiAgICAgICAgICAgICAgICAvLyBSZS1pbml0aWFsaXplIGpvYiBjYXJkIGZ1bmN0aW9uYWxpdHkgaWYgd2UncmUgb24gdGhlIG9wcG9ydHVuaXRpZXMgcGFnZVxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuam9iLWNhcmQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplSm9iQ2FyZHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgb24gZmlyc3QgcGFnZSBsb2FkXG4gICAgICAgICAgICBpbml0aWFsaXplUGFnZUludGVyYWN0aXZpdHkoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSBqb2IgY2FyZCBpbnRlcmFjdGlvbnNcbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUpvYkNhcmRzKCkge1xuICAgICAgICAgICAgLy8gSm9iIG1vZGFsIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgIGNvbnN0IGpvYk1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYk1vZGFsJyk7XG4gICAgICAgICAgICBjb25zdCBtb2RhbENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxKb2JDb250ZW50Jyk7XG4gICAgICAgICAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qb2ItbW9kYWwtY2xvc2UnKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpvYi1tb2RhbC1iYWNrZHJvcCcpO1xuICAgICAgICAgICAgY29uc3Qgam9iRGVzY3JpcHRpb25zU2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYkRlc2NyaXB0aW9ucycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWpvYk1vZGFsIHx8ICFtb2RhbENvbnRlbnQgfHwgIWNsb3NlQnRuIHx8ICFiYWNrZHJvcCB8fCAham9iRGVzY3JpcHRpb25zU2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGlmIHJlcXVpcmVkIGVsZW1lbnRzIGRvbid0IGV4aXN0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGpvYkRlc2NyaXB0aW9ucyA9IEpTT04ucGFyc2Uoam9iRGVzY3JpcHRpb25zU2NyaXB0LnRleHRDb250ZW50KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyB0byBwcmV2ZW50IGR1cGxpY2F0aW9uXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0NhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1jYXJkJyk7XG4gICAgICAgICAgICBleGlzdGluZ0NhcmRzLmZvckVhY2goY2FyZCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgbm9kZSB0byByZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NhcmQgPSBjYXJkLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBjYXJkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NhcmQsIGNhcmQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBjbGljayBsaXN0ZW5lcnMgdG8gam9iIGNhcmRzXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWNhcmQnKS5mb3JFYWNoKGNhcmQgPT4ge1xuICAgICAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBvcGVuIG1vZGFsIGlmIGFwcGx5IGJ1dHRvbiB3YXMgY2xpY2tlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmFwcGx5LWJ0bicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGpvYklkID0gY2FyZC5kYXRhc2V0LmpvYklkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoam9iRGVzY3JpcHRpb25zW2pvYklkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkpvYk1vZGFsKGpvYkRlc2NyaXB0aW9uc1tqb2JJZF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ2xvc2UgbW9kYWwgZXZlbnRzIC0gb25seSBhZGQgaWYgbm90IGFscmVhZHkgYWRkZWRcbiAgICAgICAgICAgIGlmICghY2xvc2VCdG4uaGFzQXR0cmlidXRlKCdkYXRhLWxpc3RlbmVyLWFkZGVkJykpIHtcbiAgICAgICAgICAgICAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSm9iTW9kYWwpO1xuICAgICAgICAgICAgICAgIGNsb3NlQnRuLnNldEF0dHJpYnV0ZSgnZGF0YS1saXN0ZW5lci1hZGRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghYmFja2Ryb3AuaGFzQXR0cmlidXRlKCdkYXRhLWxpc3RlbmVyLWFkZGVkJykpIHtcbiAgICAgICAgICAgICAgICBiYWNrZHJvcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSm9iTW9kYWwpO1xuICAgICAgICAgICAgICAgIGJhY2tkcm9wLnNldEF0dHJpYnV0ZSgnZGF0YS1saXN0ZW5lci1hZGRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBlc2NhcGUga2V5IGxpc3RlbmVyIGlzIHJlLXJlZ2lzdGVyZWQgd2l0aCB0aGUgY3VycmVudCBtb2RhbCBpbnN0YW5jZVxuICAgICAgICAgICAgaWYgKHdpbmRvdy5fX2pvYkVzY2FwZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgd2luZG93Ll9fam9iRXNjYXBlSGFuZGxlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbmRvdy5fX2pvYkVzY2FwZUhhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBsb29rIHVwIHRoZSBsYXRlc3QgbW9kYWwgZWxlbWVudFxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JNb2RhbCcpO1xuICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScgJiYgY3VycmVudE1vZGFsICYmIGN1cnJlbnRNb2RhbC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlSm9iTW9kYWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgd2luZG93Ll9fam9iRXNjYXBlSGFuZGxlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9wZW5Kb2JNb2RhbChqb2JEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIFVSTCB3aXRob3V0IHBhZ2UgcmVsb2FkXG4gICAgICAgICAgICAgICAgY29uc3Qgam9iSWQgPSBPYmplY3Qua2V5cyhqb2JEZXNjcmlwdGlvbnMpLmZpbmQoaWQgPT4gXG4gICAgICAgICAgICAgICAgICAgIGpvYkRlc2NyaXB0aW9uc1tpZF0udGl0bGUgPT09IGpvYkRhdGEudGl0bGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChqb2JJZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdVcmwgPSBgJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9P2pvYj0ke2pvYklkfWA7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IGpvYklkIH0sICcnLCBuZXdVcmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbW9kYWwgY29udGVudFxuICAgICAgICAgICAgICAgIG1vZGFsQ29udGVudC5pbm5lckhUTUwgPSBjcmVhdGVNb2RhbENvbnRlbnQoam9iRGF0YSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWRkIG1vZGFsIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgICAgICBhZGRNb2RhbEludGVyYWN0aXZpdHkoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBtb2RhbCBzY3JvbGwgcG9zaXRpb24gdG8gdG9wIC0gcHJldmVudHMgc2Nyb2xsIHBvc2l0aW9uIG1lbW9yeSBpc3N1ZVxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpvYi1tb2RhbC1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsQ29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFNob3cgbW9kYWwgd2l0aCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ21vZGFsLW9wZW4nKTtcbiAgICAgICAgICAgICAgICBqb2JNb2RhbC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvc2VKb2JNb2RhbCgpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVVJMIHRvIHJlbW92ZSBqb2IgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsV2l0aG91dEpvYiA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmxXaXRob3V0Sm9iKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBqb2JNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLW9wZW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTW9kYWxDb250ZW50KGpvYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2ItbW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0aXRsZVwiPiR7am9iLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFnc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7am9iLnRhZ3MubWFwKHRhZyA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke3RhZ308L3NwYW4+YCkuam9pbignJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2ItZGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2FsYXJ5XCI+JHtqb2Iuc2FsYXJ5fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxvY2F0aW9uXCI+JHtqb2IubG9jYXRpb259PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2ItbW9kYWwtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwic3VidGl0bGVcIj5BYm91dCB0aGlzIHJvbGU8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiYm9keS10ZXh0XCI+JHtqb2IuZGVzY3JpcHRpb24ub3ZlcnZpZXd9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInN1YnRpdGxlXCI+S2V5IFJlc3BvbnNpYmlsaXRpZXM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtYnVsbGV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtqb2IuZGVzY3JpcHRpb24ucmVzcG9uc2liaWxpdGllcy5tYXAoaXRlbSA9PiBgPGxpPiR7aXRlbX08L2xpPmApLmpvaW4oJycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwic3VidGl0bGVcIj5SZXF1aXJlbWVudHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtYnVsbGV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtqb2IuZGVzY3JpcHRpb24ucmVxdWlyZW1lbnRzLm1hcChpdGVtID0+IGA8bGk+JHtpdGVtfTwvbGk+YCkuam9pbignJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJzdWJ0aXRsZVwiPldoYXQgd2Ugb2ZmZXI8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtYnVsbGV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtqb2IuZGVzY3JpcHRpb24uYmVuZWZpdHMubWFwKGl0ZW0gPT4gYDxsaT4ke2l0ZW19PC9saT5gKS5qb2luKCcnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2ItbW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXBwbGljYXRpb24tZm9ybVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWxlLXVwbG9hZC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtdXBsb2FkLWFyZWFcIiBpZD1cImZpbGVVcGxvYWRBcmVhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsZS11cGxvYWQtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJmaWxlLXVwbG9hZC1pY29uXCIgd2lkdGg9XCI0OFwiIGhlaWdodD1cIjQ4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMS41XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjEgMTV2NGEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMnYtNFwiPjwvcGF0aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvbHlsaW5lIHBvaW50cz1cIjcsMTAgMTIsMTUgMTcsMTBcIj48L3BvbHlsaW5lPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGluZSB4MT1cIjEyXCIgeTE9XCIxNVwiIHgyPVwiMTJcIiB5Mj1cIjNcIj48L2xpbmU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PkRyb3AgeW91ciBDViBoZXJlIG9yIGNsaWNrIHRvIGJyb3dzZTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJzbWFsbC10ZXh0XCI+UERGLCBET0MsIERPQ1ggKG1heCAxME1CKTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJjdkZpbGVcIiBhY2NlcHQ9XCIucGRmLC5kb2MsLmRvY3hcIiBoaWRkZW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsZS1zZWxlY3RlZFwiIGlkPVwiZmlsZVNlbGVjdGVkXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmaWxlLW5hbWVcIiBpZD1cImZpbGVOYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJmaWxlLXJlbW92ZVwiIGlkPVwiZmlsZVJlbW92ZVwiPsOXPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tib3hlc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjaGVja2JveC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIm5ld3NsZXR0ZXJDb25zZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNoZWNrbWFya1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic21hbGwtdGV4dFwiPlNlbmQgbWUgam9iIGFsZXJ0cyBhbmQgdXBkYXRlcyBmcm9tIGx1eHNlYXJjaMKuICh1bnN1YnNjcmliZSBhbnl0aW1lKS48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zdWJtaXRcIiBpZD1cInN1Ym1pdEFwcGxpY2F0aW9uXCIgZGlzYWJsZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlN1Ym1pdCBBcHBsaWNhdGlvbjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicHJpdmFjeS1ub3RpY2Ugc21hbGwtdGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCeSBzdWJtaXR0aW5nLCB5b3UgYWNjZXB0IG91ciA8YSBocmVmPVwiI1wiIGNsYXNzPVwicHJpdmFjeS1saW5rXCI+UHJpdmFjeSBQb2xpY3k8L2E+IGFuZCA8YSBocmVmPVwiI1wiIGNsYXNzPVwicHJpdmFjeS1saW5rXCI+VGVybXMgb2YgVXNlPC9hPiBhbmQgYWxsb3cgdXMgdG8gc2hhcmUgeW91ciBkYXRhIHdpdGggb3VyIHBhcnRuZXIgY29tcGFuaWVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRNb2RhbEludGVyYWN0aXZpdHkoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVVwbG9hZEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZVVwbG9hZEFyZWEnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3ZGaWxlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVNlbGVjdGVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVTZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVOYW1lJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVJlbW92ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlUmVtb3ZlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaWxlIHVwbG9hZCBpbnRlcmFjdGlvbnNcbiAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGZpbGVJbnB1dC5jbGljaygpKTtcbiAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKTtcbiAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgICAgICAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUZpbGVTZWxlY3QpO1xuICAgICAgICAgICAgICAgIGZpbGVSZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZW1vdmVGaWxlKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdPdmVyKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5jbGFzc0xpc3QuYWRkKCdkcmFnLW92ZXInKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnLW92ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5maWxlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUZpbGVTZWxlY3QoeyB0YXJnZXQ6IHsgZmlsZXMgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUZpbGVTZWxlY3QoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZS50ZXh0Q29udGVudCA9IGZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVVcGxvYWRBcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlU2VsZWN0ZWQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZUZpbGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQXJlYS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVTZWxlY3RlZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgLy8gU3VibWl0IGZvcm1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHVwIGdsb2JhbCBVUkwgbWFuYWdlbWVudCAtIG1ha2UgZnVuY3Rpb25zIGdsb2JhbGx5IGFjY2Vzc2libGVcbiAgICAgICAgICAgIHdpbmRvdy5fX29wZW5Kb2JGcm9tVXJsID0gZnVuY3Rpb24oam9iSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoam9iRGVzY3JpcHRpb25zW2pvYklkXSkge1xuICAgICAgICAgICAgICAgICAgICBvcGVuSm9iTW9kYWwoam9iRGVzY3JpcHRpb25zW2pvYklkXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB3aW5kb3cuX19jbG9zZUpvYk1vZGFsID0gY2xvc2VKb2JNb2RhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBicm93c2VyIG5hdmlnYXRpb24gLSBzZXQgdXAgb25jZSBnbG9iYWxseVxuICAgICAgICBpZiAoIXdpbmRvdy5fX2pvYk5hdkluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB3aW5kb3cuX19qb2JOYXZJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCBvcGVuIGEgam9iIG1vZGFsIGJhc2VkIG9uIFVSTFxuICAgICAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgam9iSWQgPSB1cmxQYXJhbXMuZ2V0KCdqb2InKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoam9iSWQgJiYgd2luZG93Ll9fb3BlbkpvYkZyb21VcmwgJiYgd2luZG93Ll9fb3BlbkpvYkZyb21Vcmwoam9iSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEpvYiBvcGVuZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xvc2UgbW9kYWwgaWYgbm8gam9iIGluIFVSTCBvciBqb2Igbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYk1vZGFsJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbCAmJiBtb2RhbC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIFVSTCBvbiBwYWdlIGxvYWQgdG8gYXV0by1vcGVuIGpvYiBpZiBwcmVzZW50XG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAgICAgY29uc3Qgam9iSWQgPSB1cmxQYXJhbXMuZ2V0KCdqb2InKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGpvYklkICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcygnL29wcG9ydHVuaXRpZXMnKSkge1xuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIG1vZGFsIHNldHVwIHRvIGNvbXBsZXRlXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuX19vcGVuSm9iRnJvbVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Ll9fb3BlbkpvYkZyb21Vcmwoam9iSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIDwvc2NyaXB0PlxuPC9ib2R5PlxuPC9odG1sPiJdLCJtYXBwaW5ncyI6IkFBK0RRLFNBQVMsaUJBQWlCLG9CQUFvQixNQUFNO0FBQ2hELFFBQU0sV0FBVyxTQUFTLGlCQUFpQixXQUFXO0FBRXRELFdBQVMsUUFBUSxVQUFRO0FBQ3JCLFNBQUssaUJBQWlCLFNBQVMsT0FBTyxNQUFNO0FBQ3hDLFFBQUUsZUFBZTtBQUNqQixZQUFNLE9BQU8sS0FBSyxhQUFhLE1BQU07QUFHckMsZUFB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